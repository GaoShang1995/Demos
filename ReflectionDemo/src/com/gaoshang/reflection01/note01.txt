在java.long.Class<T>类中：

　　getMethod():获取当前类及所有继承的父类的public修饰的方法。仅包括public;

　　getDeclaredMethod():获取当前类的所有方法，包括public/private/protected/default修饰的方法.

疑问：
    1.通过new和反射都可以访问类的公共结构，开发中到底用哪个？
        建议使用new方式创建对象
        追问：什么时候会使用反射？
            反射的特征：动态性
    2.反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术？
        这两个技术不矛盾

类的加载过程？
        编译产生.class字节码文件
        使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中。
        加载到内存中的类，称为运行时类，此运行时类，就作为Class的一个实例

    详解：
        1.类的加载：将类的class文件读入内存，并为之创建一个java.lang.Class对象，由类的加载器完成
        2.类的链接：将类的二进制数据合并到JRE中
            验证：确保加载的类符合规范
            准备：静态变量分配内存，设置默认初始化值
            解析：常量池内的符号引用（常量名）替换为直接引用（地址值）
        3.类的初始化：JVM负责对类进行初始化
            执行类构造器<clinit>()
            确保一个类的<clinit>()在多线程环境中被正确加锁和同步
类的加载器：
        一旦一个类被加载到内存中，会在一段时间内存在类对象的缓存，JVM可以回收类对象
        加载器规范：
            引导类加载器：Bootstrap Classloader 用C++编写，是jvm自带的类加载器，负责java平台核心库，用来装载核心类库。该加载器无法直接获取
            扩展类加载器：Extension Classloader 负责jre/lib/ext目录下的jar包或 -D java.ext.dirs指定目录下的jar包装入工作库
            系统类加载器：负责java -classpath 或 -D java.class.path所指定的目录下的类与jar包装入工作，是最常用的加载器
