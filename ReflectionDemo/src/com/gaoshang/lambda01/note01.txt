1.举例：(o1,o2) -> Integer.compare(o1,o2);
2.格式:
        ->:lambda操作符或者箭头操作符
        ->左边 lambda形参列表（其实就是接口中的抽象方法的形参列表）
        ->右边 lambda体（其实就是重写的抽象方法的方法体）
3.Lambda使用：六种情况下使用
            1.无参，无返回值
            2.有参，无返回值
4.Lambda本质：在其他语言中是匿名函数
    在java中，是接口的实例
5.如果一个接口中，只声明了一个抽象方法，则此接口就称作函数式接口。
    可以在接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口
6.JAVA内置的核心四大函数式接口
    Consumer<T>:消费型接口
    Supplier<T>:供给型接口
    Function<T,R>:函数型接口
    Predicate<T>:断定型接口
7.当要传递给Lambda体的操作，已经有实现方法了，可以使用方法引用
    方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用
    ，也是函数式接口的实例
   使用格式：
       类（或对象） :: 方法名
8.具体分为三种情况：
    对象::非静态方法
    类::静态方法
    类::非静态方法

9.方法引用的使用要求：要求接口中的抽象方法的形参列表和返回值类型
                      与方法引用的方法的形参列表和返回值类型相同
